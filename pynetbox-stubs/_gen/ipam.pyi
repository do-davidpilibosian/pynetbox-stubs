
from typing import Any, Dict, List, Optional, Union, Iterable
from pynetbox.core.api import Api
from pynetbox.core.app import App
from pynetbox.core.endpoint import Endpoint
from pynetbox.core.response import RecordSet, Record
from pynetbox._get import definitions

class AggregatesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.AggregatesEndpoint]: ...
    def get(self, id: Optional[str], date_added: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], rir_id: Optional[str], rir: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], date_added__n: Optional[str], date_added__lte: Optional[str], date_added__lt: Optional[str], date_added__gte: Optional[str], date_added__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.AggregatesEndpoint: ...
    def filter(self, id: Optional[str], date_added: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], rir_id: Optional[str], rir: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], date_added__n: Optional[str], date_added__lte: Optional[str], date_added__lt: Optional[str], date_added__gte: Optional[str], date_added__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.AggregatesEndpoint]: ...
    def create(self, id: Optional[str], date_added: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], rir_id: Optional[str], rir: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], date_added__n: Optional[str], date_added__lte: Optional[str], date_added__lt: Optional[str], date_added__gte: Optional[str], date_added__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.AggregatesEndpoint: ...
    def update(self, objects: Iterable[definitions.AggregatesEndpoint]) -> [definitions.AggregatesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.AggregatesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], date_added: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], rir_id: Optional[str], rir: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], date_added__n: Optional[str], date_added__lte: Optional[str], date_added__lt: Optional[str], date_added__gte: Optional[str], date_added__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class AsnsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.AsnsEndpoint]: ...
    def get(self, id: Optional[str], asn: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], rir_id: Optional[str], rir: Optional[str], site_id: Optional[str], site: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], asn__n: Optional[str], asn__lte: Optional[str], asn__lt: Optional[str], asn__gte: Optional[str], asn__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.AsnsEndpoint: ...
    def filter(self, id: Optional[str], asn: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], rir_id: Optional[str], rir: Optional[str], site_id: Optional[str], site: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], asn__n: Optional[str], asn__lte: Optional[str], asn__lt: Optional[str], asn__gte: Optional[str], asn__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.AsnsEndpoint]: ...
    def create(self, id: Optional[str], asn: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], rir_id: Optional[str], rir: Optional[str], site_id: Optional[str], site: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], asn__n: Optional[str], asn__lte: Optional[str], asn__lt: Optional[str], asn__gte: Optional[str], asn__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.AsnsEndpoint: ...
    def update(self, objects: Iterable[definitions.AsnsEndpoint]) -> [definitions.AsnsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.AsnsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], asn: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], rir_id: Optional[str], rir: Optional[str], site_id: Optional[str], site: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], asn__n: Optional[str], asn__lte: Optional[str], asn__lt: Optional[str], asn__gte: Optional[str], asn__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], rir_id__n: Optional[str], rir__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Fhrp_group_assignmentsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Fhrp_group_assignmentsEndpoint]: ...
    def get(self, id: Optional[str], group_id: Optional[str], interface_type: Optional[str], interface_id: Optional[str], priority: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], interface_type__n: Optional[str], interface_id__n: Optional[str], interface_id__lte: Optional[str], interface_id__lt: Optional[str], interface_id__gte: Optional[str], interface_id__gt: Optional[str], priority__n: Optional[str], priority__lte: Optional[str], priority__lt: Optional[str], priority__gte: Optional[str], priority__gt: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Fhrp_group_assignmentsEndpoint: ...
    def filter(self, id: Optional[str], group_id: Optional[str], interface_type: Optional[str], interface_id: Optional[str], priority: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], interface_type__n: Optional[str], interface_id__n: Optional[str], interface_id__lte: Optional[str], interface_id__lt: Optional[str], interface_id__gte: Optional[str], interface_id__gt: Optional[str], priority__n: Optional[str], priority__lte: Optional[str], priority__lt: Optional[str], priority__gte: Optional[str], priority__gt: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Fhrp_group_assignmentsEndpoint]: ...
    def create(self, id: Optional[str], group_id: Optional[str], interface_type: Optional[str], interface_id: Optional[str], priority: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], interface_type__n: Optional[str], interface_id__n: Optional[str], interface_id__lte: Optional[str], interface_id__lt: Optional[str], interface_id__gte: Optional[str], interface_id__gt: Optional[str], priority__n: Optional[str], priority__lte: Optional[str], priority__lt: Optional[str], priority__gte: Optional[str], priority__gt: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Fhrp_group_assignmentsEndpoint: ...
    def update(self, objects: Iterable[definitions.Fhrp_group_assignmentsEndpoint]) -> [definitions.Fhrp_group_assignmentsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Fhrp_group_assignmentsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], group_id: Optional[str], interface_type: Optional[str], interface_id: Optional[str], priority: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], interface_type__n: Optional[str], interface_id__n: Optional[str], interface_id__lte: Optional[str], interface_id__lt: Optional[str], interface_id__gte: Optional[str], interface_id__gt: Optional[str], priority__n: Optional[str], priority__lte: Optional[str], priority__lt: Optional[str], priority__gte: Optional[str], priority__gt: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Fhrp_groupsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Fhrp_groupsEndpoint]: ...
    def get(self, id: Optional[str], group_id: Optional[str], auth_key: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], protocol: Optional[str], auth_type: Optional[str], related_ip: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], group_id__lte: Optional[str], group_id__lt: Optional[str], group_id__gte: Optional[str], group_id__gt: Optional[str], auth_key__n: Optional[str], auth_key__ic: Optional[str], auth_key__nic: Optional[str], auth_key__iew: Optional[str], auth_key__niew: Optional[str], auth_key__isw: Optional[str], auth_key__nisw: Optional[str], auth_key__ie: Optional[str], auth_key__nie: Optional[str], tag__n: Optional[str], protocol__n: Optional[str], auth_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Fhrp_groupsEndpoint: ...
    def filter(self, id: Optional[str], group_id: Optional[str], auth_key: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], protocol: Optional[str], auth_type: Optional[str], related_ip: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], group_id__lte: Optional[str], group_id__lt: Optional[str], group_id__gte: Optional[str], group_id__gt: Optional[str], auth_key__n: Optional[str], auth_key__ic: Optional[str], auth_key__nic: Optional[str], auth_key__iew: Optional[str], auth_key__niew: Optional[str], auth_key__isw: Optional[str], auth_key__nisw: Optional[str], auth_key__ie: Optional[str], auth_key__nie: Optional[str], tag__n: Optional[str], protocol__n: Optional[str], auth_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Fhrp_groupsEndpoint]: ...
    def create(self, id: Optional[str], group_id: Optional[str], auth_key: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], protocol: Optional[str], auth_type: Optional[str], related_ip: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], group_id__lte: Optional[str], group_id__lt: Optional[str], group_id__gte: Optional[str], group_id__gt: Optional[str], auth_key__n: Optional[str], auth_key__ic: Optional[str], auth_key__nic: Optional[str], auth_key__iew: Optional[str], auth_key__niew: Optional[str], auth_key__isw: Optional[str], auth_key__nisw: Optional[str], auth_key__ie: Optional[str], auth_key__nie: Optional[str], tag__n: Optional[str], protocol__n: Optional[str], auth_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Fhrp_groupsEndpoint: ...
    def update(self, objects: Iterable[definitions.Fhrp_groupsEndpoint]) -> [definitions.Fhrp_groupsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Fhrp_groupsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], group_id: Optional[str], auth_key: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], protocol: Optional[str], auth_type: Optional[str], related_ip: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], group_id__n: Optional[str], group_id__lte: Optional[str], group_id__lt: Optional[str], group_id__gte: Optional[str], group_id__gt: Optional[str], auth_key__n: Optional[str], auth_key__ic: Optional[str], auth_key__nic: Optional[str], auth_key__iew: Optional[str], auth_key__niew: Optional[str], auth_key__isw: Optional[str], auth_key__nisw: Optional[str], auth_key__ie: Optional[str], auth_key__nie: Optional[str], tag__n: Optional[str], protocol__n: Optional[str], auth_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Ip_addressesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Ip_addressesEndpoint]: ...
    def get(self, id: Optional[str], dns_name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], parent: Optional[str], address: Optional[str], mask_length: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], interface: Optional[str], interface_id: Optional[str], vminterface: Optional[str], vminterface_id: Optional[str], fhrpgroup_id: Optional[str], assigned_to_interface: Optional[str], status: Optional[str], role: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], dns_name__n: Optional[str], dns_name__ic: Optional[str], dns_name__nic: Optional[str], dns_name__iew: Optional[str], dns_name__niew: Optional[str], dns_name__isw: Optional[str], dns_name__nisw: Optional[str], dns_name__ie: Optional[str], dns_name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], interface__n: Optional[str], interface_id__n: Optional[str], vminterface__n: Optional[str], vminterface_id__n: Optional[str], fhrpgroup_id__n: Optional[str], status__n: Optional[str], role__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Ip_addressesEndpoint: ...
    def filter(self, id: Optional[str], dns_name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], parent: Optional[str], address: Optional[str], mask_length: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], interface: Optional[str], interface_id: Optional[str], vminterface: Optional[str], vminterface_id: Optional[str], fhrpgroup_id: Optional[str], assigned_to_interface: Optional[str], status: Optional[str], role: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], dns_name__n: Optional[str], dns_name__ic: Optional[str], dns_name__nic: Optional[str], dns_name__iew: Optional[str], dns_name__niew: Optional[str], dns_name__isw: Optional[str], dns_name__nisw: Optional[str], dns_name__ie: Optional[str], dns_name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], interface__n: Optional[str], interface_id__n: Optional[str], vminterface__n: Optional[str], vminterface_id__n: Optional[str], fhrpgroup_id__n: Optional[str], status__n: Optional[str], role__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Ip_addressesEndpoint]: ...
    def create(self, id: Optional[str], dns_name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], parent: Optional[str], address: Optional[str], mask_length: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], interface: Optional[str], interface_id: Optional[str], vminterface: Optional[str], vminterface_id: Optional[str], fhrpgroup_id: Optional[str], assigned_to_interface: Optional[str], status: Optional[str], role: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], dns_name__n: Optional[str], dns_name__ic: Optional[str], dns_name__nic: Optional[str], dns_name__iew: Optional[str], dns_name__niew: Optional[str], dns_name__isw: Optional[str], dns_name__nisw: Optional[str], dns_name__ie: Optional[str], dns_name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], interface__n: Optional[str], interface_id__n: Optional[str], vminterface__n: Optional[str], vminterface_id__n: Optional[str], fhrpgroup_id__n: Optional[str], status__n: Optional[str], role__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Ip_addressesEndpoint: ...
    def update(self, objects: Iterable[definitions.Ip_addressesEndpoint]) -> [definitions.Ip_addressesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Ip_addressesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], dns_name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], parent: Optional[str], address: Optional[str], mask_length: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], device: Optional[str], device_id: Optional[str], virtual_machine: Optional[str], virtual_machine_id: Optional[str], interface: Optional[str], interface_id: Optional[str], vminterface: Optional[str], vminterface_id: Optional[str], fhrpgroup_id: Optional[str], assigned_to_interface: Optional[str], status: Optional[str], role: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], dns_name__n: Optional[str], dns_name__ic: Optional[str], dns_name__nic: Optional[str], dns_name__iew: Optional[str], dns_name__niew: Optional[str], dns_name__isw: Optional[str], dns_name__nisw: Optional[str], dns_name__ie: Optional[str], dns_name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], interface__n: Optional[str], interface_id__n: Optional[str], vminterface__n: Optional[str], vminterface_id__n: Optional[str], fhrpgroup_id__n: Optional[str], status__n: Optional[str], role__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Ip_rangesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Ip_rangesEndpoint]: ...
    def get(self, id: Optional[str], description: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], family: Optional[float], contains: Optional[str], vrf_id: Optional[str], vrf: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], tag__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Ip_rangesEndpoint: ...
    def filter(self, id: Optional[str], description: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], family: Optional[float], contains: Optional[str], vrf_id: Optional[str], vrf: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], tag__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Ip_rangesEndpoint]: ...
    def create(self, id: Optional[str], description: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], family: Optional[float], contains: Optional[str], vrf_id: Optional[str], vrf: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], tag__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Ip_rangesEndpoint: ...
    def update(self, objects: Iterable[definitions.Ip_rangesEndpoint]) -> [definitions.Ip_rangesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Ip_rangesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], description: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], family: Optional[float], contains: Optional[str], vrf_id: Optional[str], vrf: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], tag__n: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class PrefixesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.PrefixesEndpoint]: ...
    def get(self, id: Optional[str], is_pool: Optional[str], mark_utilized: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], within: Optional[str], within_include: Optional[str], contains: Optional[str], depth: Optional[str], children: Optional[str], mask_length: Optional[str], mask_length__gte: Optional[float], mask_length__lte: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], vlan_id: Optional[str], vlan_vid: Optional[float], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], depth__n: Optional[str], depth__lte: Optional[str], depth__lt: Optional[str], depth__gte: Optional[str], depth__gt: Optional[str], children__n: Optional[str], children__lte: Optional[str], children__lt: Optional[str], children__gte: Optional[str], children__gt: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], vlan_id__n: Optional[str], vlan_vid__n: Optional[float], vlan_vid__lte: Optional[float], vlan_vid__lt: Optional[float], vlan_vid__gte: Optional[float], vlan_vid__gt: Optional[float], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.PrefixesEndpoint: ...
    def filter(self, id: Optional[str], is_pool: Optional[str], mark_utilized: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], within: Optional[str], within_include: Optional[str], contains: Optional[str], depth: Optional[str], children: Optional[str], mask_length: Optional[str], mask_length__gte: Optional[float], mask_length__lte: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], vlan_id: Optional[str], vlan_vid: Optional[float], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], depth__n: Optional[str], depth__lte: Optional[str], depth__lt: Optional[str], depth__gte: Optional[str], depth__gt: Optional[str], children__n: Optional[str], children__lte: Optional[str], children__lt: Optional[str], children__gte: Optional[str], children__gt: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], vlan_id__n: Optional[str], vlan_vid__n: Optional[float], vlan_vid__lte: Optional[float], vlan_vid__lt: Optional[float], vlan_vid__gte: Optional[float], vlan_vid__gt: Optional[float], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.PrefixesEndpoint]: ...
    def create(self, id: Optional[str], is_pool: Optional[str], mark_utilized: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], within: Optional[str], within_include: Optional[str], contains: Optional[str], depth: Optional[str], children: Optional[str], mask_length: Optional[str], mask_length__gte: Optional[float], mask_length__lte: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], vlan_id: Optional[str], vlan_vid: Optional[float], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], depth__n: Optional[str], depth__lte: Optional[str], depth__lt: Optional[str], depth__gte: Optional[str], depth__gt: Optional[str], children__n: Optional[str], children__lte: Optional[str], children__lt: Optional[str], children__gte: Optional[str], children__gt: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], vlan_id__n: Optional[str], vlan_vid__n: Optional[float], vlan_vid__lte: Optional[float], vlan_vid__lt: Optional[float], vlan_vid__gte: Optional[float], vlan_vid__gt: Optional[float], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.PrefixesEndpoint: ...
    def update(self, objects: Iterable[definitions.PrefixesEndpoint]) -> [definitions.PrefixesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.PrefixesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], is_pool: Optional[str], mark_utilized: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], family: Optional[float], prefix: Optional[str], within: Optional[str], within_include: Optional[str], contains: Optional[str], depth: Optional[str], children: Optional[str], mask_length: Optional[str], mask_length__gte: Optional[float], mask_length__lte: Optional[float], vrf_id: Optional[str], vrf: Optional[str], present_in_vrf_id: Optional[str], present_in_vrf: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], vlan_id: Optional[str], vlan_vid: Optional[float], role_id: Optional[str], role: Optional[str], status: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], depth__n: Optional[str], depth__lte: Optional[str], depth__lt: Optional[str], depth__gte: Optional[str], depth__gt: Optional[str], children__n: Optional[str], children__lte: Optional[str], children__lt: Optional[str], children__gte: Optional[str], children__gt: Optional[str], vrf_id__n: Optional[str], vrf__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], vlan_id__n: Optional[str], vlan_vid__n: Optional[float], vlan_vid__lte: Optional[float], vlan_vid__lt: Optional[float], vlan_vid__gte: Optional[float], vlan_vid__gt: Optional[float], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class RirsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.RirsEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], slug: Optional[str], is_private: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.RirsEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], slug: Optional[str], is_private: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.RirsEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], slug: Optional[str], is_private: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.RirsEndpoint: ...
    def update(self, objects: Iterable[definitions.RirsEndpoint]) -> [definitions.RirsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.RirsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], slug: Optional[str], is_private: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class RolesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.RolesEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], slug: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.RolesEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], slug: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.RolesEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], slug: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.RolesEndpoint: ...
    def update(self, objects: Iterable[definitions.RolesEndpoint]) -> [definitions.RolesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.RolesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], slug: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Route_targetsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Route_targetsEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], importing_vrf_id: Optional[str], importing_vrf: Optional[str], exporting_vrf_id: Optional[str], exporting_vrf: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], importing_vrf_id__n: Optional[str], importing_vrf__n: Optional[str], exporting_vrf_id__n: Optional[str], exporting_vrf__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Route_targetsEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], importing_vrf_id: Optional[str], importing_vrf: Optional[str], exporting_vrf_id: Optional[str], exporting_vrf: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], importing_vrf_id__n: Optional[str], importing_vrf__n: Optional[str], exporting_vrf_id__n: Optional[str], exporting_vrf__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Route_targetsEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], importing_vrf_id: Optional[str], importing_vrf: Optional[str], exporting_vrf_id: Optional[str], exporting_vrf: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], importing_vrf_id__n: Optional[str], importing_vrf__n: Optional[str], exporting_vrf_id__n: Optional[str], exporting_vrf__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Route_targetsEndpoint: ...
    def update(self, objects: Iterable[definitions.Route_targetsEndpoint]) -> [definitions.Route_targetsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Route_targetsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], importing_vrf_id: Optional[str], importing_vrf: Optional[str], exporting_vrf_id: Optional[str], exporting_vrf: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], importing_vrf_id__n: Optional[str], importing_vrf__n: Optional[str], exporting_vrf_id__n: Optional[str], exporting_vrf__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Service_templatesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Service_templatesEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], protocol: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Service_templatesEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], protocol: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Service_templatesEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], protocol: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Service_templatesEndpoint: ...
    def update(self, objects: Iterable[definitions.Service_templatesEndpoint]) -> [definitions.Service_templatesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Service_templatesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], protocol: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], tag__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class ServicesEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.ServicesEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], protocol: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], device_id: Optional[str], device: Optional[str], virtual_machine_id: Optional[str], virtual_machine: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], device_id__n: Optional[str], device__n: Optional[str], virtual_machine_id__n: Optional[str], virtual_machine__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.ServicesEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], protocol: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], device_id: Optional[str], device: Optional[str], virtual_machine_id: Optional[str], virtual_machine: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], device_id__n: Optional[str], device__n: Optional[str], virtual_machine_id__n: Optional[str], virtual_machine__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.ServicesEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], protocol: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], device_id: Optional[str], device: Optional[str], virtual_machine_id: Optional[str], virtual_machine: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], device_id__n: Optional[str], device__n: Optional[str], virtual_machine_id__n: Optional[str], virtual_machine__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.ServicesEndpoint: ...
    def update(self, objects: Iterable[definitions.ServicesEndpoint]) -> [definitions.ServicesEndpoint]: ...
    def delete(self, objects: Iterable[definitions.ServicesEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], protocol: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], device_id: Optional[str], device: Optional[str], virtual_machine_id: Optional[str], virtual_machine: Optional[str], port: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], protocol__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], device_id__n: Optional[str], device__n: Optional[str], virtual_machine_id__n: Optional[str], virtual_machine__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Vlan_groupsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.Vlan_groupsEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], slug: Optional[str], min_vid: Optional[str], max_vid: Optional[str], description: Optional[str], scope_id: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], scope_type: Optional[str], region: Optional[float], sitegroup: Optional[float], site: Optional[float], location: Optional[float], rack: Optional[float], clustergroup: Optional[float], cluster: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], min_vid__n: Optional[str], min_vid__lte: Optional[str], min_vid__lt: Optional[str], min_vid__gte: Optional[str], min_vid__gt: Optional[str], max_vid__n: Optional[str], max_vid__lte: Optional[str], max_vid__lt: Optional[str], max_vid__gte: Optional[str], max_vid__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], scope_id__n: Optional[str], scope_id__lte: Optional[str], scope_id__lt: Optional[str], scope_id__gte: Optional[str], scope_id__gt: Optional[str], tag__n: Optional[str], scope_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Vlan_groupsEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], slug: Optional[str], min_vid: Optional[str], max_vid: Optional[str], description: Optional[str], scope_id: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], scope_type: Optional[str], region: Optional[float], sitegroup: Optional[float], site: Optional[float], location: Optional[float], rack: Optional[float], clustergroup: Optional[float], cluster: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], min_vid__n: Optional[str], min_vid__lte: Optional[str], min_vid__lt: Optional[str], min_vid__gte: Optional[str], min_vid__gt: Optional[str], max_vid__n: Optional[str], max_vid__lte: Optional[str], max_vid__lt: Optional[str], max_vid__gte: Optional[str], max_vid__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], scope_id__n: Optional[str], scope_id__lte: Optional[str], scope_id__lt: Optional[str], scope_id__gte: Optional[str], scope_id__gt: Optional[str], tag__n: Optional[str], scope_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.Vlan_groupsEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], slug: Optional[str], min_vid: Optional[str], max_vid: Optional[str], description: Optional[str], scope_id: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], scope_type: Optional[str], region: Optional[float], sitegroup: Optional[float], site: Optional[float], location: Optional[float], rack: Optional[float], clustergroup: Optional[float], cluster: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], min_vid__n: Optional[str], min_vid__lte: Optional[str], min_vid__lt: Optional[str], min_vid__gte: Optional[str], min_vid__gt: Optional[str], max_vid__n: Optional[str], max_vid__lte: Optional[str], max_vid__lt: Optional[str], max_vid__gte: Optional[str], max_vid__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], scope_id__n: Optional[str], scope_id__lte: Optional[str], scope_id__lt: Optional[str], scope_id__gte: Optional[str], scope_id__gt: Optional[str], tag__n: Optional[str], scope_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.Vlan_groupsEndpoint: ...
    def update(self, objects: Iterable[definitions.Vlan_groupsEndpoint]) -> [definitions.Vlan_groupsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.Vlan_groupsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], slug: Optional[str], min_vid: Optional[str], max_vid: Optional[str], description: Optional[str], scope_id: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], scope_type: Optional[str], region: Optional[float], sitegroup: Optional[float], site: Optional[float], location: Optional[float], rack: Optional[float], clustergroup: Optional[float], cluster: Optional[float], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], slug__n: Optional[str], slug__ic: Optional[str], slug__nic: Optional[str], slug__iew: Optional[str], slug__niew: Optional[str], slug__isw: Optional[str], slug__nisw: Optional[str], slug__ie: Optional[str], slug__nie: Optional[str], min_vid__n: Optional[str], min_vid__lte: Optional[str], min_vid__lt: Optional[str], min_vid__gte: Optional[str], min_vid__gt: Optional[str], max_vid__n: Optional[str], max_vid__lte: Optional[str], max_vid__lt: Optional[str], max_vid__gte: Optional[str], max_vid__gt: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], scope_id__n: Optional[str], scope_id__lte: Optional[str], scope_id__lt: Optional[str], scope_id__gte: Optional[str], scope_id__gt: Optional[str], tag__n: Optional[str], scope_type__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class VlansEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.VlansEndpoint]: ...
    def get(self, id: Optional[str], vid: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], group_id: Optional[str], group: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], available_on_device: Optional[str], available_on_virtualmachine: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], vid__n: Optional[str], vid__lte: Optional[str], vid__lt: Optional[str], vid__gte: Optional[str], vid__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.VlansEndpoint: ...
    def filter(self, id: Optional[str], vid: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], group_id: Optional[str], group: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], available_on_device: Optional[str], available_on_virtualmachine: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], vid__n: Optional[str], vid__lte: Optional[str], vid__lt: Optional[str], vid__gte: Optional[str], vid__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.VlansEndpoint]: ...
    def create(self, id: Optional[str], vid: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], group_id: Optional[str], group: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], available_on_device: Optional[str], available_on_virtualmachine: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], vid__n: Optional[str], vid__lte: Optional[str], vid__lt: Optional[str], vid__gte: Optional[str], vid__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.VlansEndpoint: ...
    def update(self, objects: Iterable[definitions.VlansEndpoint]) -> [definitions.VlansEndpoint]: ...
    def delete(self, objects: Iterable[definitions.VlansEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], vid: Optional[str], name: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], region_id: Optional[str], region: Optional[str], site_group_id: Optional[str], site_group: Optional[str], site_id: Optional[str], site: Optional[str], group_id: Optional[str], group: Optional[str], role_id: Optional[str], role: Optional[str], status: Optional[str], available_on_device: Optional[str], available_on_virtualmachine: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], vid__n: Optional[str], vid__lte: Optional[str], vid__lt: Optional[str], vid__gte: Optional[str], vid__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], region_id__n: Optional[str], region__n: Optional[str], site_group_id__n: Optional[str], site_group__n: Optional[str], site_id__n: Optional[str], site__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], role_id__n: Optional[str], role__n: Optional[str], status__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class VrfsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[definitions.VrfsEndpoint]: ...
    def get(self, id: Optional[str], name: Optional[str], rd: Optional[str], enforce_unique: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], import_target_id: Optional[str], import_target: Optional[str], export_target_id: Optional[str], export_target: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], rd__n: Optional[str], rd__ic: Optional[str], rd__nic: Optional[str], rd__iew: Optional[str], rd__niew: Optional[str], rd__isw: Optional[str], rd__nisw: Optional[str], rd__ie: Optional[str], rd__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], import_target_id__n: Optional[str], import_target__n: Optional[str], export_target_id__n: Optional[str], export_target__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.VrfsEndpoint: ...
    def filter(self, id: Optional[str], name: Optional[str], rd: Optional[str], enforce_unique: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], import_target_id: Optional[str], import_target: Optional[str], export_target_id: Optional[str], export_target: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], rd__n: Optional[str], rd__ic: Optional[str], rd__nic: Optional[str], rd__iew: Optional[str], rd__niew: Optional[str], rd__isw: Optional[str], rd__nisw: Optional[str], rd__ie: Optional[str], rd__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], import_target_id__n: Optional[str], import_target__n: Optional[str], export_target_id__n: Optional[str], export_target__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet[definitions.VrfsEndpoint]: ...
    def create(self, id: Optional[str], name: Optional[str], rd: Optional[str], enforce_unique: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], import_target_id: Optional[str], import_target: Optional[str], export_target_id: Optional[str], export_target: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], rd__n: Optional[str], rd__ic: Optional[str], rd__nic: Optional[str], rd__iew: Optional[str], rd__niew: Optional[str], rd__isw: Optional[str], rd__nisw: Optional[str], rd__ie: Optional[str], rd__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], import_target_id__n: Optional[str], import_target__n: Optional[str], export_target_id__n: Optional[str], export_target__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> definitions.VrfsEndpoint: ...
    def update(self, objects: Iterable[definitions.VrfsEndpoint]) -> [definitions.VrfsEndpoint]: ...
    def delete(self, objects: Iterable[definitions.VrfsEndpoint]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], rd: Optional[str], enforce_unique: Optional[str], description: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], last_updated: Optional[str], last_updated__gte: Optional[str], last_updated__lte: Optional[str], q: Optional[str], tag: Optional[str], tenant_group_id: Optional[str], tenant_group: Optional[str], tenant_id: Optional[str], tenant: Optional[str], import_target_id: Optional[str], import_target: Optional[str], export_target_id: Optional[str], export_target: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], rd__n: Optional[str], rd__ic: Optional[str], rd__nic: Optional[str], rd__iew: Optional[str], rd__niew: Optional[str], rd__isw: Optional[str], rd__nisw: Optional[str], rd__ie: Optional[str], rd__nie: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], tag__n: Optional[str], tenant_group_id__n: Optional[str], tenant_group__n: Optional[str], tenant_id__n: Optional[str], tenant__n: Optional[str], import_target_id__n: Optional[str], import_target__n: Optional[str], export_target_id__n: Optional[str], export_target__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...

class IpamApp(App):
    def __init__(self, api: 'Api', name):
        self.aggregates: AggregatesEndpoint = ...
        self.asns: AsnsEndpoint = ...
        self.fhrp_group_assignments: Fhrp_group_assignmentsEndpoint = ...
        self.fhrp_groups: Fhrp_groupsEndpoint = ...
        self.ip_addresses: Ip_addressesEndpoint = ...
        self.ip_ranges: Ip_rangesEndpoint = ...
        self.prefixes: PrefixesEndpoint = ...
        self.rirs: RirsEndpoint = ...
        self.roles: RolesEndpoint = ...
        self.route_targets: Route_targetsEndpoint = ...
        self.service_templates: Service_templatesEndpoint = ...
        self.services: ServicesEndpoint = ...
        self.vlan_groups: Vlan_groupsEndpoint = ...
        self.vlans: VlansEndpoint = ...
        self.vrfs: VrfsEndpoint = ...