from typing import Any, Dict, Iterable, List, Optional, Union, overload

from pynetbox._gen import definitions
from pynetbox.core.api import Api
from pynetbox.core.app import App
from pynetbox.core.endpoint import Endpoint
from pynetbox.core.response import Record, RecordSet

class Bgp_bgppeergroupEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.BGPPeerGroup]: ...
    def get(
        self,
        description: Optional[str] = None,
        limit: Optional[int] = None,
        name: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.BGPPeerGroup]: ...
    def filter(
        self,
        description: Optional[str] = None,
        limit: Optional[int] = None,
        name: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.BGPPeerGroup]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.BGPPeerGroup: ...
    @overload
    def create(
        self,
        name: str,
        description: str,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        import_policies: Optional[List[Any]] = None,
        export_policies: Optional[List[Any]] = None,
        custom_field_data: Optional[Any] = None,
    ) -> definitions.BGPPeerGroup: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.BGPPeerGroup: ...
    def update(
        self, objects: Iterable[definitions.BGPPeerGroup]
    ) -> RecordSet[definitions.BGPPeerGroup]: ...
    def delete(self, objects: Iterable[definitions.BGPPeerGroup]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        description: Optional[str] = None,
        limit: Optional[int] = None,
        name: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_bgpsessionEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.BGPSession]: ...
    def get(
        self,
        by_local_address: Optional[str] = None,
        by_remote_address: Optional[str] = None,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        device: Optional[str] = None,
        device__n: Optional[str] = None,
        device_id: Optional[int] = None,
        device_id__n: Optional[int] = None,
        export_policies: Optional[int] = None,
        export_policies__n: Optional[int] = None,
        import_policies: Optional[int] = None,
        import_policies__n: Optional[int] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        local_address: Optional[str] = None,
        local_address__n: Optional[str] = None,
        local_address_id: Optional[int] = None,
        local_address_id__n: Optional[int] = None,
        local_as: Optional[int] = None,
        local_as__n: Optional[int] = None,
        local_as_id: Optional[int] = None,
        local_as_id__n: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        peer_group: Optional[int] = None,
        peer_group__n: Optional[int] = None,
        q: Optional[str] = None,
        remote_address: Optional[str] = None,
        remote_address__n: Optional[str] = None,
        remote_address_id: Optional[int] = None,
        remote_address_id__n: Optional[int] = None,
        remote_as: Optional[int] = None,
        remote_as__n: Optional[int] = None,
        remote_as_id: Optional[int] = None,
        remote_as_id__n: Optional[int] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.BGPSession]: ...
    def filter(
        self,
        by_local_address: Optional[str] = None,
        by_remote_address: Optional[str] = None,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        device: Optional[str] = None,
        device__n: Optional[str] = None,
        device_id: Optional[int] = None,
        device_id__n: Optional[int] = None,
        export_policies: Optional[int] = None,
        export_policies__n: Optional[int] = None,
        import_policies: Optional[int] = None,
        import_policies__n: Optional[int] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        local_address: Optional[str] = None,
        local_address__n: Optional[str] = None,
        local_address_id: Optional[int] = None,
        local_address_id__n: Optional[int] = None,
        local_as: Optional[int] = None,
        local_as__n: Optional[int] = None,
        local_as_id: Optional[int] = None,
        local_as_id__n: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        peer_group: Optional[int] = None,
        peer_group__n: Optional[int] = None,
        q: Optional[str] = None,
        remote_address: Optional[str] = None,
        remote_address__n: Optional[str] = None,
        remote_address_id: Optional[int] = None,
        remote_address_id__n: Optional[int] = None,
        remote_as: Optional[int] = None,
        remote_as__n: Optional[int] = None,
        remote_as_id: Optional[int] = None,
        remote_as_id__n: Optional[int] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.BGPSession]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.BGPSession: ...
    @overload
    def create(
        self,
        device: int,
        local_address: int,
        remote_address: int,
        local_as: int,
        remote_as: int,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        status: Optional[str] = None,
        site: Optional[int] = None,
        tenant: Optional[int] = None,
        peer_group: Optional[int] = None,
        import_policies: Optional[List[Any]] = None,
        export_policies: Optional[List[Any]] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
    ) -> definitions.BGPSession: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.BGPSession: ...
    def update(
        self, objects: Iterable[definitions.BGPSession]
    ) -> RecordSet[definitions.BGPSession]: ...
    def delete(self, objects: Iterable[definitions.BGPSession]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        by_local_address: Optional[str] = None,
        by_remote_address: Optional[str] = None,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        device: Optional[str] = None,
        device__n: Optional[str] = None,
        device_id: Optional[int] = None,
        device_id__n: Optional[int] = None,
        export_policies: Optional[int] = None,
        export_policies__n: Optional[int] = None,
        import_policies: Optional[int] = None,
        import_policies__n: Optional[int] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        local_address: Optional[str] = None,
        local_address__n: Optional[str] = None,
        local_address_id: Optional[int] = None,
        local_address_id__n: Optional[int] = None,
        local_as: Optional[int] = None,
        local_as__n: Optional[int] = None,
        local_as_id: Optional[int] = None,
        local_as_id__n: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        peer_group: Optional[int] = None,
        peer_group__n: Optional[int] = None,
        q: Optional[str] = None,
        remote_address: Optional[str] = None,
        remote_address__n: Optional[str] = None,
        remote_address_id: Optional[int] = None,
        remote_address_id__n: Optional[int] = None,
        remote_as: Optional[int] = None,
        remote_as__n: Optional[int] = None,
        remote_as_id: Optional[int] = None,
        remote_as_id__n: Optional[int] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_communityEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.Community]: ...
    def get(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        value: Optional[str] = None,
        value__empty: Optional[bool] = None,
        value__ic: Optional[str] = None,
        value__ie: Optional[str] = None,
        value__iew: Optional[str] = None,
        value__isw: Optional[str] = None,
        value__n: Optional[str] = None,
        value__nic: Optional[str] = None,
        value__nie: Optional[str] = None,
        value__niew: Optional[str] = None,
        value__nisw: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.Community]: ...
    def filter(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        value: Optional[str] = None,
        value__empty: Optional[bool] = None,
        value__ic: Optional[str] = None,
        value__ie: Optional[str] = None,
        value__iew: Optional[str] = None,
        value__isw: Optional[str] = None,
        value__n: Optional[str] = None,
        value__nic: Optional[str] = None,
        value__nie: Optional[str] = None,
        value__niew: Optional[str] = None,
        value__nisw: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.Community]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.Community: ...
    @overload
    def create(
        self,
        value: str,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        status: Optional[str] = None,
        tenant: Optional[int] = None,
        description: Optional[str] = None,
        site: Optional[int] = None,
        role: Optional[int] = None,
    ) -> definitions.Community: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.Community: ...
    def update(
        self, objects: Iterable[definitions.Community]
    ) -> RecordSet[definitions.Community]: ...
    def delete(self, objects: Iterable[definitions.Community]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        value: Optional[str] = None,
        value__empty: Optional[bool] = None,
        value__ic: Optional[str] = None,
        value__ie: Optional[str] = None,
        value__iew: Optional[str] = None,
        value__isw: Optional[str] = None,
        value__n: Optional[str] = None,
        value__nic: Optional[str] = None,
        value__nie: Optional[str] = None,
        value__niew: Optional[str] = None,
        value__nisw: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_peer_groupEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.BGPPeerGroup]: ...
    def get(
        self,
        description: Optional[str] = None,
        limit: Optional[int] = None,
        name: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.BGPPeerGroup]: ...
    def filter(
        self,
        description: Optional[str] = None,
        limit: Optional[int] = None,
        name: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.BGPPeerGroup]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.BGPPeerGroup: ...
    @overload
    def create(
        self,
        name: str,
        description: str,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        import_policies: Optional[List[Any]] = None,
        export_policies: Optional[List[Any]] = None,
        custom_field_data: Optional[Any] = None,
    ) -> definitions.BGPPeerGroup: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.BGPPeerGroup: ...
    def update(
        self, objects: Iterable[definitions.BGPPeerGroup]
    ) -> RecordSet[definitions.BGPPeerGroup]: ...
    def delete(self, objects: Iterable[definitions.BGPPeerGroup]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        description: Optional[str] = None,
        limit: Optional[int] = None,
        name: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_prefix_listEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.PrefixList]: ...
    def get(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.PrefixList]: ...
    def filter(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.PrefixList]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.PrefixList: ...
    @overload
    def create(
        self,
        name: str,
        description: str,
        family: str,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        custom_field_data: Optional[Any] = None,
    ) -> definitions.PrefixList: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.PrefixList: ...
    def update(
        self, objects: Iterable[definitions.PrefixList]
    ) -> RecordSet[definitions.PrefixList]: ...
    def delete(self, objects: Iterable[definitions.PrefixList]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_prefix_list_ruleEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.PrefixListRule]: ...
    def get(
        self,
        action: Optional[str] = None,
        ge: Optional[int] = None,
        id: Optional[int] = None,
        index: Optional[int] = None,
        le: Optional[int] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        prefix_list: Optional[int] = None,
        prefix_list_id: Optional[int] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.PrefixListRule]: ...
    def filter(
        self,
        action: Optional[str] = None,
        ge: Optional[int] = None,
        id: Optional[int] = None,
        index: Optional[int] = None,
        le: Optional[int] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        prefix_list: Optional[int] = None,
        prefix_list_id: Optional[int] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.PrefixListRule]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.PrefixListRule: ...
    @overload
    def create(
        self,
        prefix_list: int,
        index: int,
        action: str,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        prefix_custom: Optional[str] = None,
        ge: Optional[int] = None,
        le: Optional[int] = None,
        prefix: Optional[int] = None,
    ) -> definitions.PrefixListRule: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.PrefixListRule: ...
    def update(
        self, objects: Iterable[definitions.PrefixListRule]
    ) -> RecordSet[definitions.PrefixListRule]: ...
    def delete(
        self, objects: Iterable[definitions.PrefixListRule]
    ) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        action: Optional[str] = None,
        ge: Optional[int] = None,
        id: Optional[int] = None,
        index: Optional[int] = None,
        le: Optional[int] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        prefix_list: Optional[int] = None,
        prefix_list_id: Optional[int] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_routing_policyEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.RoutingPolicy]: ...
    def get(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.RoutingPolicy]: ...
    def filter(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.RoutingPolicy]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.RoutingPolicy: ...
    @overload
    def create(
        self,
        name: str,
        description: str,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        custom_field_data: Optional[Any] = None,
    ) -> definitions.RoutingPolicy: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.RoutingPolicy: ...
    def update(
        self, objects: Iterable[definitions.RoutingPolicy]
    ) -> RecordSet[definitions.RoutingPolicy]: ...
    def delete(self, objects: Iterable[definitions.RoutingPolicy]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_routing_policy_ruleEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.RoutingPolicyRule]: ...
    def get(
        self,
        action: Optional[str] = None,
        continue_entry: Optional[int] = None,
        description: Optional[str] = None,
        id: Optional[int] = None,
        index: Optional[int] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        routing_policy_id: Optional[int] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.RoutingPolicyRule]: ...
    def filter(
        self,
        action: Optional[str] = None,
        continue_entry: Optional[int] = None,
        description: Optional[str] = None,
        id: Optional[int] = None,
        index: Optional[int] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        routing_policy_id: Optional[int] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.RoutingPolicyRule]: ...
    @overload
    def create(
        self, *args: Dict[str, Any]
    ) -> definitions.RoutingPolicyRule: ...
    @overload
    def create(
        self,
        index: int,
        action: str,
        routing_policy: int,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        custom_field_data: Optional[Any] = None,
        description: Optional[str] = None,
        continue_entry: Optional[int] = None,
        match_custom: Optional[Any] = None,
        set_actions: Optional[Any] = None,
        match_community: Optional[List[Any]] = None,
        match_ip_address: Optional[List[Any]] = None,
        match_ipv6_address: Optional[List[Any]] = None,
    ) -> definitions.RoutingPolicyRule: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.RoutingPolicyRule: ...
    def update(
        self, objects: Iterable[definitions.RoutingPolicyRule]
    ) -> RecordSet[definitions.RoutingPolicyRule]: ...
    def delete(
        self, objects: Iterable[definitions.RoutingPolicyRule]
    ) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        action: Optional[str] = None,
        continue_entry: Optional[int] = None,
        description: Optional[str] = None,
        id: Optional[int] = None,
        index: Optional[int] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        q: Optional[str] = None,
        routing_policy_id: Optional[int] = None,
        tag: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class Bgp_sessionEndpoint(Endpoint):
    def all(
        self, limit=0, offset=None
    ) -> RecordSet[definitions.BGPSession]: ...
    def get(
        self,
        by_local_address: Optional[str] = None,
        by_remote_address: Optional[str] = None,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        device: Optional[str] = None,
        device__n: Optional[str] = None,
        device_id: Optional[int] = None,
        device_id__n: Optional[int] = None,
        export_policies: Optional[int] = None,
        export_policies__n: Optional[int] = None,
        import_policies: Optional[int] = None,
        import_policies__n: Optional[int] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        local_address: Optional[str] = None,
        local_address__n: Optional[str] = None,
        local_address_id: Optional[int] = None,
        local_address_id__n: Optional[int] = None,
        local_as: Optional[int] = None,
        local_as__n: Optional[int] = None,
        local_as_id: Optional[int] = None,
        local_as_id__n: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        peer_group: Optional[int] = None,
        peer_group__n: Optional[int] = None,
        q: Optional[str] = None,
        remote_address: Optional[str] = None,
        remote_address__n: Optional[str] = None,
        remote_address_id: Optional[int] = None,
        remote_address_id__n: Optional[int] = None,
        remote_as: Optional[int] = None,
        remote_as__n: Optional[int] = None,
        remote_as_id: Optional[int] = None,
        remote_as_id__n: Optional[int] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> Optional[definitions.BGPSession]: ...
    def filter(
        self,
        by_local_address: Optional[str] = None,
        by_remote_address: Optional[str] = None,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        device: Optional[str] = None,
        device__n: Optional[str] = None,
        device_id: Optional[int] = None,
        device_id__n: Optional[int] = None,
        export_policies: Optional[int] = None,
        export_policies__n: Optional[int] = None,
        import_policies: Optional[int] = None,
        import_policies__n: Optional[int] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        local_address: Optional[str] = None,
        local_address__n: Optional[str] = None,
        local_address_id: Optional[int] = None,
        local_address_id__n: Optional[int] = None,
        local_as: Optional[int] = None,
        local_as__n: Optional[int] = None,
        local_as_id: Optional[int] = None,
        local_as_id__n: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        peer_group: Optional[int] = None,
        peer_group__n: Optional[int] = None,
        q: Optional[str] = None,
        remote_address: Optional[str] = None,
        remote_address__n: Optional[str] = None,
        remote_address_id: Optional[int] = None,
        remote_address_id__n: Optional[int] = None,
        remote_as: Optional[int] = None,
        remote_as__n: Optional[int] = None,
        remote_as_id: Optional[int] = None,
        remote_as_id__n: Optional[int] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> RecordSet[definitions.BGPSession]: ...
    @overload
    def create(self, *args: Dict[str, Any]) -> definitions.BGPSession: ...
    @overload
    def create(
        self,
        device: int,
        local_address: int,
        remote_address: int,
        local_as: int,
        remote_as: int,
        tags: Optional[List[Any]] = None,
        custom_fields: Optional[Any] = None,
        status: Optional[str] = None,
        site: Optional[int] = None,
        tenant: Optional[int] = None,
        peer_group: Optional[int] = None,
        import_policies: Optional[List[Any]] = None,
        export_policies: Optional[List[Any]] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
    ) -> definitions.BGPSession: ...
    def create(
        self, *args: Dict[str, Any], **kwargs: Any
    ) -> definitions.BGPSession: ...
    def update(
        self, objects: Iterable[definitions.BGPSession]
    ) -> RecordSet[definitions.BGPSession]: ...
    def delete(self, objects: Iterable[definitions.BGPSession]) -> bool: ...
    def choices(self) -> dict: ...
    def count(
        self,
        by_local_address: Optional[str] = None,
        by_remote_address: Optional[str] = None,
        created: Optional[str] = None,
        created__empty: Optional[str] = None,
        created__gt: Optional[str] = None,
        created__gte: Optional[str] = None,
        created__lt: Optional[str] = None,
        created__lte: Optional[str] = None,
        created__n: Optional[str] = None,
        created_by_request: Optional[str] = None,
        description: Optional[str] = None,
        description__empty: Optional[bool] = None,
        description__ic: Optional[str] = None,
        description__ie: Optional[str] = None,
        description__iew: Optional[str] = None,
        description__isw: Optional[str] = None,
        description__n: Optional[str] = None,
        description__nic: Optional[str] = None,
        description__nie: Optional[str] = None,
        description__niew: Optional[str] = None,
        description__nisw: Optional[str] = None,
        device: Optional[str] = None,
        device__n: Optional[str] = None,
        device_id: Optional[int] = None,
        device_id__n: Optional[int] = None,
        export_policies: Optional[int] = None,
        export_policies__n: Optional[int] = None,
        import_policies: Optional[int] = None,
        import_policies__n: Optional[int] = None,
        last_updated: Optional[str] = None,
        last_updated__empty: Optional[str] = None,
        last_updated__gt: Optional[str] = None,
        last_updated__gte: Optional[str] = None,
        last_updated__lt: Optional[str] = None,
        last_updated__lte: Optional[str] = None,
        last_updated__n: Optional[str] = None,
        limit: Optional[int] = None,
        local_address: Optional[str] = None,
        local_address__n: Optional[str] = None,
        local_address_id: Optional[int] = None,
        local_address_id__n: Optional[int] = None,
        local_as: Optional[int] = None,
        local_as__n: Optional[int] = None,
        local_as_id: Optional[int] = None,
        local_as_id__n: Optional[int] = None,
        modified_by_request: Optional[str] = None,
        name: Optional[str] = None,
        name__empty: Optional[bool] = None,
        name__ic: Optional[str] = None,
        name__ie: Optional[str] = None,
        name__iew: Optional[str] = None,
        name__isw: Optional[str] = None,
        name__n: Optional[str] = None,
        name__nic: Optional[str] = None,
        name__nie: Optional[str] = None,
        name__niew: Optional[str] = None,
        name__nisw: Optional[str] = None,
        offset: Optional[int] = None,
        ordering: Optional[str] = None,
        peer_group: Optional[int] = None,
        peer_group__n: Optional[int] = None,
        q: Optional[str] = None,
        remote_address: Optional[str] = None,
        remote_address__n: Optional[str] = None,
        remote_address_id: Optional[int] = None,
        remote_address_id__n: Optional[int] = None,
        remote_as: Optional[int] = None,
        remote_as__n: Optional[int] = None,
        remote_as_id: Optional[int] = None,
        remote_as_id__n: Optional[int] = None,
        status: Optional[str] = None,
        status__n: Optional[str] = None,
        tag: Optional[str] = None,
        tag__n: Optional[str] = None,
        tenant: Optional[int] = None,
        tenant__n: Optional[int] = None,
        updated_by_request: Optional[str] = None,
        **kwargs: Optional[Any]
    ) -> int: ...

class PluginsApp(App):
    def __init__(self, api: 'Api', name):
        self.bgp_bgppeergroup: Bgp_bgppeergroupEndpoint = ...
        self.bgp_bgpsession: Bgp_bgpsessionEndpoint = ...
        self.bgp_community: Bgp_communityEndpoint = ...
        self.bgp_peer_group: Bgp_peer_groupEndpoint = ...
        self.bgp_prefix_list: Bgp_prefix_listEndpoint = ...
        self.bgp_prefix_list_rule: Bgp_prefix_list_ruleEndpoint = ...
        self.bgp_routing_policy: Bgp_routing_policyEndpoint = ...
        self.bgp_routing_policy_rule: Bgp_routing_policy_ruleEndpoint = ...
        self.bgp_session: Bgp_sessionEndpoint = ...
