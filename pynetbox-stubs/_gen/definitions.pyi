from typing import Any, Dict, List, Optional, Union, Iterable
from pynetbox.core.api import Api
from pynetbox.core.app import App
from pynetbox.core.endpoint import Endpoint
from pynetbox.core.response import RecordSet, Record

class NestedCircuit(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.cid: str

class NestedSite(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str

class NestedProviderNetwork(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class NestedCable(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.label: str

class CircuitTermination(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.circuit: "NestedCircuit"
        self.term_side: str
        self.site: "NestedSite"
        self.provider_network: "NestedProviderNetwork"
        self.port_speed: int
        self.upstream_speed: int
        self.xconnect_id: str
        self.pp_info: str
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self._occupied: bool
        self.created: str
        self.last_updated: str

class WritableCircuitTermination(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.circuit: int
        self.term_side: str
        self.site: int
        self.provider_network: int
        self.port_speed: int
        self.upstream_speed: int
        self.xconnect_id: str
        self.pp_info: str
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self._occupied: bool
        self.created: str
        self.last_updated: str

class NestedTag(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.color: str

class CircuitType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int

class NestedProvider(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.circuit_count: int

class NestedCircuitType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.circuit_count: int

class NestedTenant(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str

class CircuitCircuitTermination(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.site: "NestedSite"
        self.provider_network: "NestedProviderNetwork"
        self.port_speed: int
        self.upstream_speed: int
        self.xconnect_id: str

class Circuit(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.cid: str
        self.provider: "NestedProvider"
        self.type: "NestedCircuitType"
        self.status: Any
        self.tenant: "NestedTenant"
        self.install_date: str
        self.commit_rate: int
        self.description: str
        self.termination_a: "CircuitCircuitTermination"
        self.termination_z: "CircuitCircuitTermination"
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableCircuit(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.cid: str
        self.provider: int
        self.type: int
        self.status: str
        self.tenant: int
        self.install_date: str
        self.commit_rate: int
        self.description: str
        self.termination_a: int
        self.termination_z: int
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class ProviderNetwork(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.provider: "NestedProvider"
        self.name: str
        self.service_id: str
        self.description: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableProviderNetwork(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.provider: int
        self.name: str
        self.service_id: str
        self.description: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedASN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.asn: int

class Provider(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.asn: int
        self.account: str
        self.portal_url: str
        self.noc_contact: str
        self.admin_contact: str
        self.comments: str
        self.asns: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int

class WritableProvider(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.asn: int
        self.account: str
        self.portal_url: str
        self.noc_contact: str
        self.admin_contact: str
        self.comments: str
        self.asns: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int

class Cable(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.termination_a_type: str
        self.termination_a_id: int
        self.termination_a: Any
        self.termination_b_type: str
        self.termination_b_id: int
        self.termination_b: Any
        self.type: str
        self.status: Any
        self.tenant: "NestedTenant"
        self.label: str
        self.color: str
        self.length: float
        self.length_unit: Any
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableCable(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.termination_a_type: str
        self.termination_a_id: int
        self.termination_a: Any
        self.termination_b_type: str
        self.termination_b_id: int
        self.termination_b: Any
        self.type: str
        self.status: str
        self.tenant: int
        self.label: str
        self.color: str
        self.length: float
        self.length_unit: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedManufacturer(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.devicetype_count: int

class NestedDeviceType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.manufacturer: "NestedManufacturer"
        self.model: str
        self.slug: str
        self.device_count: int

class NestedDeviceRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.device_count: int
        self.virtualmachine_count: int

class NestedPlatform(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.device_count: int
        self.virtualmachine_count: int

class NestedLocation(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.rack_count: int
        self._depth: int

class NestedRack(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.device_count: int

class NestedDevice(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class NestedIPAddress(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: int
        self.address: str

class NestedCluster(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.virtualmachine_count: int

class NestedVirtualChassis(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.master: "NestedDevice"
        self.member_count: int

class Device(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.device_type: "NestedDeviceType"
        self.device_role: "NestedDeviceRole"
        self.tenant: "NestedTenant"
        self.platform: "NestedPlatform"
        self.serial: str
        self.asset_tag: str
        self.site: "NestedSite"
        self.location: "NestedLocation"
        self.rack: "NestedRack"
        self.position: int
        self.face: Any
        self.parent_device: "NestedDevice"
        self.status: Any
        self.airflow: Any
        self.primary_ip: "NestedIPAddress"
        self.primary_ip4: "NestedIPAddress"
        self.primary_ip6: "NestedIPAddress"
        self.cluster: "NestedCluster"
        self.virtual_chassis: "NestedVirtualChassis"
        self.vc_position: int
        self.vc_priority: int
        self.comments: str
        self.local_context_data: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedModuleType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.manufacturer: "NestedManufacturer"
        self.model: str

class ConsolePortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.description: str
        self.created: str
        self.last_updated: str

class WritableConsolePortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.description: str
        self.created: str
        self.last_updated: str

class ModuleNestedModuleBay(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class ComponentNestedModule(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module_bay: "ModuleNestedModuleBay"

class ConsolePort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.speed: Any
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritableConsolePort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.speed: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class ConsoleServerPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.description: str
        self.created: str
        self.last_updated: str

class WritableConsoleServerPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.description: str
        self.created: str
        self.last_updated: str

class ConsoleServerPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.speed: Any
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritableConsoleServerPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.speed: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class DeviceBayTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.name: str
        self.label: str
        self.description: str
        self.created: str
        self.last_updated: str

class WritableDeviceBayTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.name: str
        self.label: str
        self.description: str
        self.created: str
        self.last_updated: str

class DeviceBay(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.name: str
        self.label: str
        self.description: str
        self.installed_device: "NestedDevice"
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableDeviceBay(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.name: str
        self.label: str
        self.description: str
        self.installed_device: int
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class DeviceRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.color: str
        self.vm_role: bool
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.virtualmachine_count: int

class DeviceType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.manufacturer: "NestedManufacturer"
        self.model: str
        self.slug: str
        self.part_number: str
        self.u_height: int
        self.is_full_depth: bool
        self.subdevice_role: Any
        self.airflow: Any
        self.front_image: str
        self.rear_image: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int

class WritableDeviceType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.manufacturer: int
        self.model: str
        self.slug: str
        self.part_number: str
        self.u_height: int
        self.is_full_depth: bool
        self.subdevice_role: str
        self.airflow: str
        self.front_image: str
        self.rear_image: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int

class DeviceWithConfigContext(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.device_type: "NestedDeviceType"
        self.device_role: "NestedDeviceRole"
        self.tenant: "NestedTenant"
        self.platform: "NestedPlatform"
        self.serial: str
        self.asset_tag: str
        self.site: "NestedSite"
        self.location: "NestedLocation"
        self.rack: "NestedRack"
        self.position: int
        self.face: Any
        self.parent_device: "NestedDevice"
        self.status: Any
        self.airflow: Any
        self.primary_ip: "NestedIPAddress"
        self.primary_ip4: "NestedIPAddress"
        self.primary_ip6: "NestedIPAddress"
        self.cluster: "NestedCluster"
        self.virtual_chassis: "NestedVirtualChassis"
        self.vc_position: int
        self.vc_priority: int
        self.comments: str
        self.local_context_data: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.config_context: Any
        self.created: str
        self.last_updated: str

class WritableDeviceWithConfigContext(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.device_type: int
        self.device_role: int
        self.tenant: int
        self.platform: int
        self.serial: str
        self.asset_tag: str
        self.site: int
        self.location: int
        self.rack: int
        self.position: int
        self.face: str
        self.parent_device: "NestedDevice"
        self.status: str
        self.airflow: str
        self.primary_ip: str
        self.primary_ip4: int
        self.primary_ip6: int
        self.cluster: int
        self.virtual_chassis: int
        self.vc_position: int
        self.vc_priority: int
        self.comments: str
        self.local_context_data: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.config_context: Any
        self.created: str
        self.last_updated: str

class DeviceNAPALM(Record):
    def __init__(self):
        self.method: Any

class NestedRearPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class FrontPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.color: str
        self.rear_port: "NestedRearPortTemplate"
        self.rear_port_position: int
        self.description: str
        self.created: str
        self.last_updated: str

class WritableFrontPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.color: str
        self.rear_port: int
        self.rear_port_position: int
        self.description: str
        self.created: str
        self.last_updated: str

class FrontPortRearPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.label: str

class FrontPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.color: str
        self.rear_port: "FrontPortRearPort"
        self.rear_port_position: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritableFrontPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.color: str
        self.rear_port: int
        self.rear_port_position: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class InterfaceTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.mgmt_only: bool
        self.description: str
        self.created: str
        self.last_updated: str

class WritableInterfaceTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.mgmt_only: bool
        self.description: str
        self.created: str
        self.last_updated: str

class NestedInterface(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.name: str
        self.cable: int
        self._occupied: str

class NestedVLAN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.vid: int
        self.name: str

class NestedWirelessLink(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.ssid: str

class NestedWirelessLAN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.ssid: str

class NestedVRF(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.rd: str
        self.prefix_count: int

class Interface(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.enabled: bool
        self.parent: "NestedInterface"
        self.bridge: "NestedInterface"
        self.lag: "NestedInterface"
        self.mtu: int
        self.mac_address: str
        self.speed: int
        self.duplex: Any
        self.wwn: str
        self.mgmt_only: bool
        self.description: str
        self.mode: Any
        self.rf_role: Any
        self.rf_channel: Any
        self.rf_channel_frequency: float
        self.rf_channel_width: float
        self.tx_power: int
        self.untagged_vlan: "NestedVLAN"
        self.tagged_vlans: List[Any]
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.wireless_link: "NestedWirelessLink"
        self.link_peer: Any
        self.link_peer_type: str
        self.wireless_lans: List[Any]
        self.vrf: "NestedVRF"
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.count_ipaddresses: int
        self.count_fhrp_groups: int
        self._occupied: bool

class WritableInterface(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.enabled: bool
        self.parent: int
        self.bridge: int
        self.lag: int
        self.mtu: int
        self.mac_address: str
        self.speed: int
        self.duplex: str
        self.wwn: str
        self.mgmt_only: bool
        self.description: str
        self.mode: str
        self.rf_role: str
        self.rf_channel: str
        self.rf_channel_frequency: float
        self.rf_channel_width: float
        self.tx_power: int
        self.untagged_vlan: int
        self.tagged_vlans: List[Any]
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.wireless_link: int
        self.link_peer: Any
        self.link_peer_type: str
        self.wireless_lans: List[Any]
        self.vrf: int
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.count_ipaddresses: int
        self.count_fhrp_groups: int
        self._occupied: bool

class InventoryItemRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.color: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.inventoryitem_count: int

class NestedInventoryItemRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.inventoryitem_count: int

class InventoryItemTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.parent: int
        self.name: str
        self.label: str
        self.role: "NestedInventoryItemRole"
        self.manufacturer: "NestedManufacturer"
        self.part_id: str
        self.description: str
        self.component_type: str
        self.component_id: int
        self.component: Any
        self.created: str
        self.last_updated: str
        self._depth: int

class WritableInventoryItemTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.parent: int
        self.name: str
        self.label: str
        self.role: int
        self.manufacturer: int
        self.part_id: str
        self.description: str
        self.component_type: str
        self.component_id: int
        self.component: Any
        self.created: str
        self.last_updated: str
        self._depth: int

class InventoryItem(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.parent: int
        self.name: str
        self.label: str
        self.role: "NestedInventoryItemRole"
        self.manufacturer: "NestedManufacturer"
        self.part_id: str
        self.serial: str
        self.asset_tag: str
        self.discovered: bool
        self.description: str
        self.component_type: str
        self.component_id: int
        self.component: Any
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._depth: int

class WritableInventoryItem(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.parent: int
        self.name: str
        self.label: str
        self.role: int
        self.manufacturer: int
        self.part_id: str
        self.serial: str
        self.asset_tag: str
        self.discovered: bool
        self.description: str
        self.component_type: str
        self.component_id: int
        self.component: Any
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._depth: int

class Location(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.site: "NestedSite"
        self.parent: "NestedLocation"
        self.tenant: "NestedTenant"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.rack_count: int
        self.device_count: int
        self._depth: int

class WritableLocation(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.site: int
        self.parent: int
        self.tenant: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.rack_count: int
        self.device_count: int
        self._depth: int

class Manufacturer(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.devicetype_count: int
        self.inventoryitem_count: int
        self.platform_count: int

class ModuleBayTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.name: str
        self.label: str
        self.position: str
        self.description: str
        self.created: str
        self.last_updated: str

class WritableModuleBayTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.name: str
        self.label: str
        self.position: str
        self.description: str
        self.created: str
        self.last_updated: str

class ModuleBayNestedModule(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.serial: str

class ModuleBay(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.name: str
        self.installed_module: "ModuleBayNestedModule"
        self.label: str
        self.position: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableModuleBay(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.name: str
        self.installed_module: int
        self.label: str
        self.position: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class ModuleType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.manufacturer: "NestedManufacturer"
        self.model: str
        self.part_number: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableModuleType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.manufacturer: int
        self.model: str
        self.part_number: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedModule(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module_bay: "ModuleNestedModuleBay"
        self.module_type: "NestedModuleType"

class NestedModuleBay(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.module: "NestedModule"
        self.name: str

class Module(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module_bay: "NestedModuleBay"
        self.module_type: "NestedModuleType"
        self.serial: str
        self.asset_tag: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableModule(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module_bay: int
        self.module_type: int
        self.serial: str
        self.asset_tag: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class Platform(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.manufacturer: "NestedManufacturer"
        self.napalm_driver: str
        self.napalm_args: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.virtualmachine_count: int

class WritablePlatform(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.manufacturer: int
        self.napalm_driver: str
        self.napalm_args: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.virtualmachine_count: int

class NestedPowerPanel(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.powerfeed_count: int

class PowerFeed(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.power_panel: "NestedPowerPanel"
        self.rack: "NestedRack"
        self.name: str
        self.status: Any
        self.type: Any
        self.supply: Any
        self.phase: Any
        self.voltage: int
        self.amperage: int
        self.max_utilization: int
        self.comments: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritablePowerFeed(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.power_panel: int
        self.rack: int
        self.name: str
        self.status: str
        self.type: str
        self.supply: str
        self.phase: str
        self.voltage: int
        self.amperage: int
        self.max_utilization: int
        self.comments: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class NestedPowerPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class PowerOutletTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.power_port: "NestedPowerPortTemplate"
        self.feed_leg: Any
        self.description: str
        self.created: str
        self.last_updated: str

class WritablePowerOutletTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.power_port: int
        self.feed_leg: str
        self.description: str
        self.created: str
        self.last_updated: str

class NestedPowerPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.name: str
        self.cable: int
        self._occupied: str

class PowerOutlet(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.power_port: "NestedPowerPort"
        self.feed_leg: Any
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritablePowerOutlet(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.power_port: int
        self.feed_leg: str
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class PowerPanel(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.site: "NestedSite"
        self.location: "NestedLocation"
        self.name: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.powerfeed_count: int
        self.created: str
        self.last_updated: str

class WritablePowerPanel(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.site: int
        self.location: int
        self.name: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.powerfeed_count: int
        self.created: str
        self.last_updated: str

class PowerPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.maximum_draw: int
        self.allocated_draw: int
        self.description: str
        self.created: str
        self.last_updated: str

class WritablePowerPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.maximum_draw: int
        self.allocated_draw: int
        self.description: str
        self.created: str
        self.last_updated: str

class PowerPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.maximum_draw: int
        self.allocated_draw: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritablePowerPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.maximum_draw: int
        self.allocated_draw: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.connected_endpoint: Any
        self.connected_endpoint_type: str
        self.connected_endpoint_reachable: bool
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class NestedUser(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.username: str

class RackReservation(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.rack: "NestedRack"
        self.units: List[Any]
        self.created: str
        self.last_updated: str
        self.user: "NestedUser"
        self.tenant: "NestedTenant"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any

class WritableRackReservation(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.rack: int
        self.units: List[Any]
        self.created: str
        self.last_updated: str
        self.user: int
        self.tenant: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any

class RackRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.color: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.rack_count: int

class NestedRackRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.rack_count: int

class Rack(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.facility_id: str
        self.site: "NestedSite"
        self.location: "NestedLocation"
        self.tenant: "NestedTenant"
        self.status: Any
        self.role: "NestedRackRole"
        self.serial: str
        self.asset_tag: str
        self.type: Any
        self.width: Any
        self.u_height: int
        self.desc_units: bool
        self.outer_width: int
        self.outer_depth: int
        self.outer_unit: Any
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.powerfeed_count: int

class WritableRack(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.facility_id: str
        self.site: int
        self.location: int
        self.tenant: int
        self.status: str
        self.role: int
        self.serial: str
        self.asset_tag: str
        self.type: str
        self.width: int
        self.u_height: int
        self.desc_units: bool
        self.outer_width: int
        self.outer_depth: int
        self.outer_unit: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.powerfeed_count: int

class RackUnit(Record):
    def __init__(self):
        self.id: int
        self.name: str
        self.face: Any
        self.device: "NestedDevice"
        self.occupied: bool
        self.display: str

class RearPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: "NestedDeviceType"
        self.module_type: "NestedModuleType"
        self.name: str
        self.label: str
        self.type: Any
        self.color: str
        self.positions: int
        self.description: str
        self.created: str
        self.last_updated: str

class WritableRearPortTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device_type: int
        self.module_type: int
        self.name: str
        self.label: str
        self.type: str
        self.color: str
        self.positions: int
        self.description: str
        self.created: str
        self.last_updated: str

class RearPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.module: "ComponentNestedModule"
        self.name: str
        self.label: str
        self.type: Any
        self.color: str
        self.positions: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class WritableRearPort(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.module: int
        self.name: str
        self.label: str
        self.type: str
        self.color: str
        self.positions: int
        self.description: str
        self.mark_connected: bool
        self.cable: "NestedCable"
        self.link_peer: Any
        self.link_peer_type: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self._occupied: bool

class NestedRegion(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.site_count: int
        self._depth: int

class Region(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: "NestedRegion"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.site_count: int
        self._depth: int

class WritableRegion(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.site_count: int
        self._depth: int

class NestedSiteGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.site_count: int
        self._depth: int

class SiteGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: "NestedSiteGroup"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.site_count: int
        self._depth: int

class WritableSiteGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.site_count: int
        self._depth: int

class Site(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.status: Any
        self.region: "NestedRegion"
        self.group: "NestedSiteGroup"
        self.tenant: "NestedTenant"
        self.facility: str
        self.time_zone: str
        self.description: str
        self.physical_address: str
        self.shipping_address: str
        self.latitude: float
        self.longitude: float
        self.comments: str
        self.asns: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int
        self.device_count: int
        self.prefix_count: int
        self.rack_count: int
        self.virtualmachine_count: int
        self.vlan_count: int

class WritableSite(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.status: str
        self.region: int
        self.group: int
        self.tenant: int
        self.facility: str
        self.time_zone: str
        self.description: str
        self.physical_address: str
        self.shipping_address: str
        self.latitude: float
        self.longitude: float
        self.comments: str
        self.asns: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int
        self.device_count: int
        self.prefix_count: int
        self.rack_count: int
        self.virtualmachine_count: int
        self.vlan_count: int

class VirtualChassis(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.domain: str
        self.master: "NestedDevice"
        self.tags: List[Any]
        self.custom_fields: Any
        self.member_count: int
        self.created: str
        self.last_updated: str

class WritableVirtualChassis(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.domain: str
        self.master: int
        self.tags: List[Any]
        self.custom_fields: Any
        self.member_count: int
        self.created: str
        self.last_updated: str

class NestedClusterType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.cluster_count: int

class NestedClusterGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.cluster_count: int

class NestedTenantGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.tenant_count: int
        self._depth: int

class ConfigContext(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.weight: int
        self.description: str
        self.is_active: bool
        self.regions: List[Any]
        self.site_groups: List[Any]
        self.sites: List[Any]
        self.device_types: List[Any]
        self.roles: List[Any]
        self.platforms: List[Any]
        self.cluster_types: List[Any]
        self.cluster_groups: List[Any]
        self.clusters: List[Any]
        self.tenant_groups: List[Any]
        self.tenants: List[Any]
        self.tags: List[Any]
        self.data: str
        self.created: str
        self.last_updated: str

class WritableConfigContext(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.weight: int
        self.description: str
        self.is_active: bool
        self.regions: List[Any]
        self.site_groups: List[Any]
        self.sites: List[Any]
        self.device_types: List[Any]
        self.roles: List[Any]
        self.platforms: List[Any]
        self.cluster_types: List[Any]
        self.cluster_groups: List[Any]
        self.clusters: List[Any]
        self.tenant_groups: List[Any]
        self.tenants: List[Any]
        self.tags: List[Any]
        self.data: str
        self.created: str
        self.last_updated: str

class ContentType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.app_label: str
        self.model: str

class CustomField(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_types: List[Any]
        self.type: Any
        self.object_type: str
        self.data_type: str
        self.name: str
        self.label: str
        self.description: str
        self.required: bool
        self.filter_logic: Any
        self.default: str
        self.weight: int
        self.validation_minimum: int
        self.validation_maximum: int
        self.validation_regex: str
        self.choices: List[Any]
        self.created: str
        self.last_updated: str

class WritableCustomField(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_types: List[Any]
        self.type: str
        self.object_type: str
        self.data_type: str
        self.name: str
        self.label: str
        self.description: str
        self.required: bool
        self.filter_logic: str
        self.default: str
        self.weight: int
        self.validation_minimum: int
        self.validation_maximum: int
        self.validation_regex: str
        self.choices: List[Any]
        self.created: str
        self.last_updated: str

class CustomLink(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_type: str
        self.name: str
        self.enabled: bool
        self.link_text: str
        self.link_url: str
        self.weight: int
        self.group_name: str
        self.button_class: str
        self.new_window: bool
        self.created: str
        self.last_updated: str

class ExportTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_type: str
        self.name: str
        self.description: str
        self.template_code: str
        self.mime_type: str
        self.file_extension: str
        self.as_attachment: bool
        self.created: str
        self.last_updated: str

class ImageAttachment(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_type: str
        self.object_id: int
        self.parent: Any
        self.name: str
        self.image: str
        self.image_height: int
        self.image_width: int
        self.created: str
        self.last_updated: str

class JobResult(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.created: str
        self.completed: str
        self.name: str
        self.obj_type: str
        self.status: Any
        self.user: "NestedUser"
        self.data: str
        self.job_id: str

class JournalEntry(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.assigned_object_type: str
        self.assigned_object_id: int
        self.assigned_object: Any
        self.created: str
        self.created_by: int
        self.kind: Any
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.last_updated: str

class WritableJournalEntry(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.assigned_object_type: str
        self.assigned_object_id: int
        self.assigned_object: Any
        self.created: str
        self.created_by: int
        self.kind: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.last_updated: str

class ObjectChange(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.time: str
        self.user: "NestedUser"
        self.user_name: str
        self.request_id: str
        self.action: Any
        self.changed_object_type: str
        self.changed_object_id: int
        self.changed_object: Any
        self.prechange_data: str
        self.postchange_data: str

class Tag(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.color: str
        self.description: str
        self.tagged_items: int
        self.created: str
        self.last_updated: str

class Webhook(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_types: List[Any]
        self.name: str
        self.type_create: bool
        self.type_update: bool
        self.type_delete: bool
        self.payload_url: str
        self.enabled: bool
        self.http_method: str
        self.http_content_type: str
        self.additional_headers: str
        self.body_template: str
        self.secret: str
        self.conditions: str
        self.ssl_verification: bool
        self.ca_file_path: str
        self.created: str
        self.last_updated: str

class NestedRIR(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.aggregate_count: int

class Aggregate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: Any
        self.prefix: str
        self.rir: "NestedRIR"
        self.tenant: "NestedTenant"
        self.date_added: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableAggregate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: str
        self.prefix: str
        self.rir: int
        self.tenant: int
        self.date_added: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class ASN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.asn: int
        self.rir: int
        self.tenant: "NestedTenant"
        self.description: str
        self.site_count: int
        self.provider_count: int
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableASN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.asn: int
        self.rir: int
        self.tenant: int
        self.description: str
        self.site_count: int
        self.provider_count: int
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedFHRPGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.protocol: str
        self.group_id: int

class FHRPGroupAssignment(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.group: "NestedFHRPGroup"
        self.interface_type: str
        self.interface_id: int
        self.interface: Any
        self.priority: int
        self.created: str
        self.last_updated: str

class WritableFHRPGroupAssignment(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.group: int
        self.interface_type: str
        self.interface_id: int
        self.interface: Any
        self.priority: int
        self.created: str
        self.last_updated: str

class FHRPGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.protocol: str
        self.group_id: int
        self.auth_type: str
        self.auth_key: str
        self.description: str
        self.ip_addresses: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class IPAddress(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: Any
        self.address: str
        self.vrf: "NestedVRF"
        self.tenant: "NestedTenant"
        self.status: Any
        self.role: Any
        self.assigned_object_type: str
        self.assigned_object_id: int
        self.assigned_object: Any
        self.nat_inside: "NestedIPAddress"
        self.nat_outside: "NestedIPAddress"
        self.dns_name: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableIPAddress(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: str
        self.address: str
        self.vrf: int
        self.tenant: int
        self.status: str
        self.role: str
        self.assigned_object_type: str
        self.assigned_object_id: int
        self.assigned_object: Any
        self.nat_inside: int
        self.nat_outside: str
        self.dns_name: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.prefix_count: int
        self.vlan_count: int

class IPRange(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: Any
        self.start_address: str
        self.end_address: str
        self.size: int
        self.vrf: "NestedVRF"
        self.tenant: "NestedTenant"
        self.status: Any
        self.role: "NestedRole"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.children: int

class WritableIPRange(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: str
        self.start_address: str
        self.end_address: str
        self.size: int
        self.vrf: int
        self.tenant: int
        self.status: str
        self.role: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.children: int

class AvailableIP(Record):
    def __init__(self):
        self.family: int
        self.address: str
        self.vrf: "NestedVRF"

class WritableAvailableIP(Record):
    def __init__(self):
        self.family: int
        self.address: str

class Prefix(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: Any
        self.prefix: str
        self.site: "NestedSite"
        self.vrf: "NestedVRF"
        self.tenant: "NestedTenant"
        self.vlan: "NestedVLAN"
        self.status: Any
        self.role: "NestedRole"
        self.is_pool: bool
        self.mark_utilized: bool
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.children: int
        self._depth: int

class WritablePrefix(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.family: str
        self.prefix: str
        self.site: int
        self.vrf: int
        self.tenant: int
        self.vlan: int
        self.status: str
        self.role: int
        self.is_pool: bool
        self.mark_utilized: bool
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.children: int
        self._depth: int

class AvailablePrefix(Record):
    def __init__(self):
        self.family: int
        self.prefix: str
        self.vrf: "NestedVRF"

class PrefixLength(Record):
    def __init__(self):
        self.prefix_length: int

class RIR(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.is_private: bool
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.aggregate_count: int

class Role(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.weight: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.prefix_count: int
        self.vlan_count: int

class RouteTarget(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.tenant: "NestedTenant"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableRouteTarget(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.tenant: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class ServiceTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.ports: List[Any]
        self.protocol: Any
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableServiceTemplate(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.ports: List[Any]
        self.protocol: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class NestedVirtualMachine(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class Service(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: "NestedDevice"
        self.virtual_machine: "NestedVirtualMachine"
        self.name: str
        self.ports: List[Any]
        self.protocol: Any
        self.ipaddresses: List[Any]
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableService(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.device: int
        self.virtual_machine: int
        self.name: str
        self.ports: List[Any]
        self.protocol: str
        self.ipaddresses: List[Any]
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class VLANGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.scope_type: str
        self.scope_id: int
        self.scope: str
        self.min_vid: int
        self.max_vid: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.vlan_count: int

class NestedVLANGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.vlan_count: int

class AvailableVLAN(Record):
    def __init__(self):
        self.vid: int
        self.group: "NestedVLANGroup"

class WritableCreateAvailableVLAN(Record):
    def __init__(self):
        self.name: str
        self.site: int
        self.tenant: int
        self.status: str
        self.role: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any

class VLAN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.site: "NestedSite"
        self.group: "NestedVLANGroup"
        self.vid: int
        self.name: str
        self.tenant: "NestedTenant"
        self.status: Any
        self.role: "NestedRole"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.prefix_count: int

class WritableVLAN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.site: int
        self.group: int
        self.vid: int
        self.name: str
        self.tenant: int
        self.status: str
        self.role: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.prefix_count: int

class NestedRouteTarget(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class VRF(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.rd: str
        self.tenant: "NestedTenant"
        self.enforce_unique: bool
        self.description: str
        self.import_targets: List[Any]
        self.export_targets: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.ipaddress_count: int
        self.prefix_count: int

class WritableVRF(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.rd: str
        self.tenant: int
        self.enforce_unique: bool
        self.description: str
        self.import_targets: List[Any]
        self.export_targets: List[Any]
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.ipaddress_count: int
        self.prefix_count: int

class NestedContact(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class NestedContactRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str

class ContactAssignment(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_type: str
        self.object_id: int
        self.object: Any
        self.contact: "NestedContact"
        self.role: "NestedContactRole"
        self.priority: Any
        self.created: str
        self.last_updated: str

class WritableContactAssignment(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.content_type: str
        self.object_id: int
        self.object: Any
        self.contact: int
        self.role: int
        self.priority: str
        self.created: str
        self.last_updated: str

class NestedContactGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.contact_count: int
        self._depth: int

class ContactGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: "NestedContactGroup"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.contact_count: int
        self._depth: int

class WritableContactGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.contact_count: int
        self._depth: int

class ContactRole(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class Contact(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.group: "NestedContactGroup"
        self.name: str
        self.title: str
        self.phone: str
        self.email: str
        self.address: str
        self.link: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableContact(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.group: int
        self.name: str
        self.title: str
        self.phone: str
        self.email: str
        self.address: str
        self.link: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class TenantGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: "NestedTenantGroup"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.tenant_count: int
        self._depth: int

class WritableTenantGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.tenant_count: int
        self._depth: int

class Tenant(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.group: "NestedTenantGroup"
        self.description: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int
        self.device_count: int
        self.ipaddress_count: int
        self.prefix_count: int
        self.rack_count: int
        self.site_count: int
        self.virtualmachine_count: int
        self.vlan_count: int
        self.vrf_count: int
        self.cluster_count: int

class WritableTenant(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.group: int
        self.description: str
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.circuit_count: int
        self.device_count: int
        self.ipaddress_count: int
        self.prefix_count: int
        self.rack_count: int
        self.site_count: int
        self.virtualmachine_count: int
        self.vlan_count: int
        self.vrf_count: int
        self.cluster_count: int

class Group(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.user_count: int

class NestedGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str

class ObjectPermission(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.description: str
        self.enabled: bool
        self.object_types: List[Any]
        self.groups: List[Any]
        self.users: List[Any]
        self.actions: List[Any]
        self.constraints: str

class WritableObjectPermission(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.description: str
        self.enabled: bool
        self.object_types: List[Any]
        self.groups: List[Any]
        self.users: List[Any]
        self.actions: List[Any]
        self.constraints: str

class Token(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.user: "NestedUser"
        self.created: str
        self.expires: str
        self.key: str
        self.write_enabled: bool
        self.description: str

class WritableToken(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.user: int
        self.created: str
        self.expires: str
        self.key: str
        self.write_enabled: bool
        self.description: str

class User(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.username: str
        self.password: str
        self.first_name: str
        self.last_name: str
        self.email: str
        self.is_staff: bool
        self.is_active: bool
        self.date_joined: str
        self.groups: List[Any]

class WritableUser(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.username: str
        self.password: str
        self.first_name: str
        self.last_name: str
        self.email: str
        self.is_staff: bool
        self.is_active: bool
        self.date_joined: str
        self.groups: List[Any]

class ClusterGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.cluster_count: int

class ClusterType(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.cluster_count: int

class Cluster(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.type: "NestedClusterType"
        self.group: "NestedClusterGroup"
        self.tenant: "NestedTenant"
        self.site: "NestedSite"
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.virtualmachine_count: int

class WritableCluster(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.type: int
        self.group: int
        self.tenant: int
        self.site: int
        self.comments: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.device_count: int
        self.virtualmachine_count: int

class NestedVMInterface(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.virtual_machine: "NestedVirtualMachine"
        self.name: str

class VMInterface(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.virtual_machine: "NestedVirtualMachine"
        self.name: str
        self.enabled: bool
        self.parent: "NestedVMInterface"
        self.bridge: "NestedVMInterface"
        self.mtu: int
        self.mac_address: str
        self.description: str
        self.mode: Any
        self.untagged_vlan: "NestedVLAN"
        self.tagged_vlans: List[Any]
        self.vrf: "NestedVRF"
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.count_ipaddresses: int
        self.count_fhrp_groups: int

class WritableVMInterface(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.virtual_machine: int
        self.name: str
        self.enabled: bool
        self.parent: int
        self.bridge: int
        self.mtu: int
        self.mac_address: str
        self.description: str
        self.mode: str
        self.untagged_vlan: int
        self.tagged_vlans: List[Any]
        self.vrf: int
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.count_ipaddresses: int
        self.count_fhrp_groups: int

class VirtualMachineWithConfigContext(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.status: Any
        self.site: "NestedSite"
        self.cluster: "NestedCluster"
        self.role: "NestedDeviceRole"
        self.tenant: "NestedTenant"
        self.platform: "NestedPlatform"
        self.primary_ip: "NestedIPAddress"
        self.primary_ip4: "NestedIPAddress"
        self.primary_ip6: "NestedIPAddress"
        self.vcpus: float
        self.memory: int
        self.disk: int
        self.comments: str
        self.local_context_data: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.config_context: Any
        self.created: str
        self.last_updated: str

class WritableVirtualMachineWithConfigContext(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.status: str
        self.site: str
        self.cluster: int
        self.role: int
        self.tenant: int
        self.platform: int
        self.primary_ip: str
        self.primary_ip4: int
        self.primary_ip6: int
        self.vcpus: float
        self.memory: int
        self.disk: int
        self.comments: str
        self.local_context_data: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.config_context: Any
        self.created: str
        self.last_updated: str

class NestedWirelessLANGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.wirelesslan_count: int
        self._depth: int

class WirelessLANGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: "NestedWirelessLANGroup"
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.wirelesslan_count: int
        self._depth: int

class WritableWirelessLANGroup(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.name: str
        self.slug: str
        self.parent: int
        self.description: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
        self.wirelesslan_count: int
        self._depth: int

class WirelessLAN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.ssid: str
        self.description: str
        self.group: "NestedWirelessLANGroup"
        self.vlan: "NestedVLAN"
        self.auth_type: Any
        self.auth_cipher: Any
        self.auth_psk: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableWirelessLAN(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.ssid: str
        self.description: str
        self.group: int
        self.vlan: int
        self.auth_type: str
        self.auth_cipher: str
        self.auth_psk: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WirelessLink(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.interface_a: "NestedInterface"
        self.interface_b: "NestedInterface"
        self.ssid: str
        self.status: Any
        self.description: str
        self.auth_type: Any
        self.auth_cipher: Any
        self.auth_psk: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str

class WritableWirelessLink(Record):
    def __init__(self):
        self.id: int
        self.url: str
        self.display: str
        self.interface_a: int
        self.interface_b: int
        self.ssid: str
        self.status: str
        self.description: str
        self.auth_type: str
        self.auth_cipher: str
        self.auth_psk: str
        self.tags: List[Any]
        self.custom_fields: Any
        self.created: str
        self.last_updated: str
