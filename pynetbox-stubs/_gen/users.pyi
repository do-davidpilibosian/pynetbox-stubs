
from typing import Any, Dict, List, Optional, Union, Iterable
from pynetbox.core.api import Api
from pynetbox.core.app import App
from pynetbox.core.endpoint import Endpoint
from pynetbox.core.response import RecordSet, Record

class ConfigEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[ConfigEndpointRecord]: ...
    def get(self, ) -> ConfigEndpointRecord: ...
    def filter(self, ) -> RecordSet: ...
    def create(self, ) -> ConfigEndpointRecord: ...
    def update(self, objects: Iterable[ConfigEndpointRecord]) -> [ConfigEndpointRecord]: ...
    def delete(self, objects: Iterable[ConfigEndpointRecord]): ...
    def choices(self) -> dict:...
    def count(self, ) -> int: ...


class GroupsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[GroupsEndpointRecord]: ...
    def get(self, id: Optional[str], name: Optional[str], q: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], limit: Optional[int], offset: Optional[int]) -> GroupsEndpointRecord: ...
    def filter(self, id: Optional[str], name: Optional[str], q: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet: ...
    def create(self, id: Optional[str], name: Optional[str], q: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], limit: Optional[int], offset: Optional[int]) -> GroupsEndpointRecord: ...
    def update(self, objects: Iterable[GroupsEndpointRecord]) -> [GroupsEndpointRecord]: ...
    def delete(self, objects: Iterable[GroupsEndpointRecord]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], q: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class PermissionsEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[PermissionsEndpointRecord]: ...
    def get(self, id: Optional[str], name: Optional[str], enabled: Optional[str], object_types: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], object_types__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> PermissionsEndpointRecord: ...
    def filter(self, id: Optional[str], name: Optional[str], enabled: Optional[str], object_types: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], object_types__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet: ...
    def create(self, id: Optional[str], name: Optional[str], enabled: Optional[str], object_types: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], object_types__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> PermissionsEndpointRecord: ...
    def update(self, objects: Iterable[PermissionsEndpointRecord]) -> [PermissionsEndpointRecord]: ...
    def delete(self, objects: Iterable[PermissionsEndpointRecord]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], name: Optional[str], enabled: Optional[str], object_types: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], name__n: Optional[str], name__ic: Optional[str], name__nic: Optional[str], name__iew: Optional[str], name__niew: Optional[str], name__isw: Optional[str], name__nisw: Optional[str], name__ie: Optional[str], name__nie: Optional[str], name__empty: Optional[str], object_types__n: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class TokensEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[TokensEndpointRecord]: ...
    def get(self, id: Optional[str], key: Optional[str], write_enabled: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], expires: Optional[str], expires__gte: Optional[str], expires__lte: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], key__n: Optional[str], key__ic: Optional[str], key__nic: Optional[str], key__iew: Optional[str], key__niew: Optional[str], key__isw: Optional[str], key__nisw: Optional[str], key__ie: Optional[str], key__nie: Optional[str], key__empty: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> TokensEndpointRecord: ...
    def filter(self, id: Optional[str], key: Optional[str], write_enabled: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], expires: Optional[str], expires__gte: Optional[str], expires__lte: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], key__n: Optional[str], key__ic: Optional[str], key__nic: Optional[str], key__iew: Optional[str], key__niew: Optional[str], key__isw: Optional[str], key__nisw: Optional[str], key__ie: Optional[str], key__nie: Optional[str], key__empty: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet: ...
    def create(self, id: Optional[str], key: Optional[str], write_enabled: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], expires: Optional[str], expires__gte: Optional[str], expires__lte: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], key__n: Optional[str], key__ic: Optional[str], key__nic: Optional[str], key__iew: Optional[str], key__niew: Optional[str], key__isw: Optional[str], key__nisw: Optional[str], key__ie: Optional[str], key__nie: Optional[str], key__empty: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> TokensEndpointRecord: ...
    def update(self, objects: Iterable[TokensEndpointRecord]) -> [TokensEndpointRecord]: ...
    def delete(self, objects: Iterable[TokensEndpointRecord]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], key: Optional[str], write_enabled: Optional[str], description: Optional[str], q: Optional[str], user_id: Optional[str], user: Optional[str], created: Optional[str], created__gte: Optional[str], created__lte: Optional[str], expires: Optional[str], expires__gte: Optional[str], expires__lte: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], key__n: Optional[str], key__ic: Optional[str], key__nic: Optional[str], key__iew: Optional[str], key__niew: Optional[str], key__isw: Optional[str], key__nisw: Optional[str], key__ie: Optional[str], key__nie: Optional[str], key__empty: Optional[str], description__n: Optional[str], description__ic: Optional[str], description__nic: Optional[str], description__iew: Optional[str], description__niew: Optional[str], description__isw: Optional[str], description__nisw: Optional[str], description__ie: Optional[str], description__nie: Optional[str], description__empty: Optional[str], user_id__n: Optional[str], user__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...


class Tokens_provisionEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[Tokens_provisionEndpointRecord]: ...
    def get(self, ) -> Tokens_provisionEndpointRecord: ...
    def filter(self, ) -> RecordSet: ...
    def create(self, ) -> Tokens_provisionEndpointRecord: ...
    def update(self, objects: Iterable[Tokens_provisionEndpointRecord]) -> [Tokens_provisionEndpointRecord]: ...
    def delete(self, objects: Iterable[Tokens_provisionEndpointRecord]): ...
    def choices(self) -> dict:...
    def count(self, ) -> int: ...


class UsersEndpoint(Endpoint):
    def all(self, limit=0, offset=None) -> RecordSet[UsersEndpointRecord]: ...
    def get(self, id: Optional[str], username: Optional[str], first_name: Optional[str], last_name: Optional[str], email: Optional[str], is_staff: Optional[str], is_active: Optional[str], q: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], username__n: Optional[str], username__ic: Optional[str], username__nic: Optional[str], username__iew: Optional[str], username__niew: Optional[str], username__isw: Optional[str], username__nisw: Optional[str], username__ie: Optional[str], username__nie: Optional[str], username__empty: Optional[str], first_name__n: Optional[str], first_name__ic: Optional[str], first_name__nic: Optional[str], first_name__iew: Optional[str], first_name__niew: Optional[str], first_name__isw: Optional[str], first_name__nisw: Optional[str], first_name__ie: Optional[str], first_name__nie: Optional[str], first_name__empty: Optional[str], last_name__n: Optional[str], last_name__ic: Optional[str], last_name__nic: Optional[str], last_name__iew: Optional[str], last_name__niew: Optional[str], last_name__isw: Optional[str], last_name__nisw: Optional[str], last_name__ie: Optional[str], last_name__nie: Optional[str], last_name__empty: Optional[str], email__n: Optional[str], email__ic: Optional[str], email__nic: Optional[str], email__iew: Optional[str], email__niew: Optional[str], email__isw: Optional[str], email__nisw: Optional[str], email__ie: Optional[str], email__nie: Optional[str], email__empty: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> UsersEndpointRecord: ...
    def filter(self, id: Optional[str], username: Optional[str], first_name: Optional[str], last_name: Optional[str], email: Optional[str], is_staff: Optional[str], is_active: Optional[str], q: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], username__n: Optional[str], username__ic: Optional[str], username__nic: Optional[str], username__iew: Optional[str], username__niew: Optional[str], username__isw: Optional[str], username__nisw: Optional[str], username__ie: Optional[str], username__nie: Optional[str], username__empty: Optional[str], first_name__n: Optional[str], first_name__ic: Optional[str], first_name__nic: Optional[str], first_name__iew: Optional[str], first_name__niew: Optional[str], first_name__isw: Optional[str], first_name__nisw: Optional[str], first_name__ie: Optional[str], first_name__nie: Optional[str], first_name__empty: Optional[str], last_name__n: Optional[str], last_name__ic: Optional[str], last_name__nic: Optional[str], last_name__iew: Optional[str], last_name__niew: Optional[str], last_name__isw: Optional[str], last_name__nisw: Optional[str], last_name__ie: Optional[str], last_name__nie: Optional[str], last_name__empty: Optional[str], email__n: Optional[str], email__ic: Optional[str], email__nic: Optional[str], email__iew: Optional[str], email__niew: Optional[str], email__isw: Optional[str], email__nisw: Optional[str], email__ie: Optional[str], email__nie: Optional[str], email__empty: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> RecordSet: ...
    def create(self, id: Optional[str], username: Optional[str], first_name: Optional[str], last_name: Optional[str], email: Optional[str], is_staff: Optional[str], is_active: Optional[str], q: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], username__n: Optional[str], username__ic: Optional[str], username__nic: Optional[str], username__iew: Optional[str], username__niew: Optional[str], username__isw: Optional[str], username__nisw: Optional[str], username__ie: Optional[str], username__nie: Optional[str], username__empty: Optional[str], first_name__n: Optional[str], first_name__ic: Optional[str], first_name__nic: Optional[str], first_name__iew: Optional[str], first_name__niew: Optional[str], first_name__isw: Optional[str], first_name__nisw: Optional[str], first_name__ie: Optional[str], first_name__nie: Optional[str], first_name__empty: Optional[str], last_name__n: Optional[str], last_name__ic: Optional[str], last_name__nic: Optional[str], last_name__iew: Optional[str], last_name__niew: Optional[str], last_name__isw: Optional[str], last_name__nisw: Optional[str], last_name__ie: Optional[str], last_name__nie: Optional[str], last_name__empty: Optional[str], email__n: Optional[str], email__ic: Optional[str], email__nic: Optional[str], email__iew: Optional[str], email__niew: Optional[str], email__isw: Optional[str], email__nisw: Optional[str], email__ie: Optional[str], email__nie: Optional[str], email__empty: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> UsersEndpointRecord: ...
    def update(self, objects: Iterable[UsersEndpointRecord]) -> [UsersEndpointRecord]: ...
    def delete(self, objects: Iterable[UsersEndpointRecord]): ...
    def choices(self) -> dict:...
    def count(self, id: Optional[str], username: Optional[str], first_name: Optional[str], last_name: Optional[str], email: Optional[str], is_staff: Optional[str], is_active: Optional[str], q: Optional[str], group_id: Optional[str], group: Optional[str], id__n: Optional[str], id__lte: Optional[str], id__lt: Optional[str], id__gte: Optional[str], id__gt: Optional[str], username__n: Optional[str], username__ic: Optional[str], username__nic: Optional[str], username__iew: Optional[str], username__niew: Optional[str], username__isw: Optional[str], username__nisw: Optional[str], username__ie: Optional[str], username__nie: Optional[str], username__empty: Optional[str], first_name__n: Optional[str], first_name__ic: Optional[str], first_name__nic: Optional[str], first_name__iew: Optional[str], first_name__niew: Optional[str], first_name__isw: Optional[str], first_name__nisw: Optional[str], first_name__ie: Optional[str], first_name__nie: Optional[str], first_name__empty: Optional[str], last_name__n: Optional[str], last_name__ic: Optional[str], last_name__nic: Optional[str], last_name__iew: Optional[str], last_name__niew: Optional[str], last_name__isw: Optional[str], last_name__nisw: Optional[str], last_name__ie: Optional[str], last_name__nie: Optional[str], last_name__empty: Optional[str], email__n: Optional[str], email__ic: Optional[str], email__nic: Optional[str], email__iew: Optional[str], email__niew: Optional[str], email__isw: Optional[str], email__nisw: Optional[str], email__ie: Optional[str], email__nie: Optional[str], email__empty: Optional[str], group_id__n: Optional[str], group__n: Optional[str], limit: Optional[int], offset: Optional[int]) -> int: ...

class UsersApp(App):
    def __init__(self, api: 'Api', name):
        self.config: ConfigEndpoint = ...
        self.groups: GroupsEndpoint = ...
        self.permissions: PermissionsEndpoint = ...
        self.tokens: TokensEndpoint = ...
        self.tokens_provision: Tokens_provisionEndpoint = ...
        self.users: UsersEndpoint = ...